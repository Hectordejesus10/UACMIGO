import Chatbot from '../models/Chatbot.js';
import ChatbotView from '../views/ChatbotView.js';
import SoporteTecnico from '../models/SoporteTecnico.js';



class ChatbotController {
  constructor() {
    console.log("Inicializando ChatbotController...");
    this.chatbot = Chatbot.getInstance();
    this.view = new ChatbotView();
    this.initialize();
  }

  initialize() {
    if (!this.verifyEssentialElements()) {
      console.error("No se pueden inicializar los event listeners - elementos faltantes");
      return;
    }

    this.setupEventListeners();
    this.showWelcomeMessage();
    console.log("Controlador inicializado correctamente");
  }

  showWelcomeMessage() {
  this.view.mostrarMensaje("Hola, ¬øen qu√© puedo ayudarte hoy?", false);
  }


  returnToMainMenu() {
    console.log("Regresando al men√∫ principal");
    this.view.showMainMenu();
    this.view.clearChat();
  }

  verifyEssentialElements() {
    const elements = {
      faqCards: document.querySelectorAll('.faq-card'),
      directChatBtn: document.getElementById('directChatBtn'),
      sendButton: document.getElementById('sendButton'),
      userInput: document.getElementById('userInput')
    };

    let allElementsPresent = true;

    if (elements.faqCards.length === 0) {
      console.error("No se encontraron tarjetas FAQ");
      allElementsPresent = false;
    }

    if (!elements.directChatBtn) {
      console.error("No se encontr√≥ el bot√≥n de chat directo");
      allElementsPresent = false;
    }

    if (!elements.sendButton) {
      console.error("No se encontr√≥ el bot√≥n de enviar");
      allElementsPresent = false;
    }

    if (!elements.userInput) {
      console.error("No se encontr√≥ el input de usuario");
      allElementsPresent = false;
    }

    return allElementsPresent;
  }

  setupEventListeners() {
    // 1. Bot√≥n de volver al men√∫
    if (this.view.backToMenuBtn) {
      this.view.backToMenuBtn.addEventListener('click', () => {
        this.returnToMainMenu();
      });
    }

    // 2. Evento para las tarjetas FAQ
    document.querySelectorAll('.faq-card').forEach(card => {
      card.addEventListener('click', () => {
        const pregunta = card.getAttribute('data-pregunta');
        if (pregunta) this.handleQuestionClick(pregunta);
      });
    });

    // 3. Bot√≥n de chat directo
    document.getElementById('directChatBtn').addEventListener('click', () => {
      console.log("Bot√≥n de chat directo clickeado");
      this.handleDirectChat();
    });

    // 4. Bot√≥n de enviar
    document.getElementById('sendButton').addEventListener('click', () => {
      this.handleUserInput();
    });

    // 5. Enter en el input
    document.getElementById('userInput').addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        this.handleUserInput();
      }
    });

    console.log("Event listeners configurados correctamente");
  }


  handleQuestionClick(pregunta) {
    console.log("Procesando pregunta:", pregunta);
    this.view.ocultarPanelFAQ(); // M√©todo renombrado
    this.view.mostrarAreaChat();
    this.processQuestion(pregunta);
  }

  returnToMainMenu() {
    console.log("Regresando al men√∫ principal");
    this.view.mostrarMainMenu(); // M√©todo renombrado
    this.view.clearChat();
  }

  handleDirectChat() {
    console.log("Iniciando chat directo");
    this.view.ocultarPanelFAQ(); // M√©todo renombrado
    this.view.mostrarAreaChat();
    this.view.focusInput();
  }

async handleUserInput() {
  const inputText = this.view.userInput.value.trim();
  console.log("Texto ingresado por usuario:", inputText);
  
  if (!inputText) return; // No hacer nada si est√° vac√≠o
  
  // Verificar si es igual a la √∫ltima pregunta
  if (this.lastQuestion && inputText.toLowerCase() === this.lastQuestion.toLowerCase()) {
    this.view.mostrarMensaje("Ya estoy procesando tu pregunta, por favor espera...", false);
    return;
  }
  
  this.lastQuestion = inputText; // Guardar la √∫ltima pregunta
  
  // Mostrar el mensaje del usuario inmediatamente
  this.view.ocultarPanelFAQ();
  this.view.mostrarAreaChat();
  this.view.mostrarMensaje(inputText, true);
  this.view.clearInput();
  
  // Primero verificar si es un saludo o texto no v√°lido
  if (this.isGreeting(inputText) || !this.isValidQuestion(inputText)) {
    this.handleSpecialCases(inputText);
    return;
  }

  // Si es una pregunta v√°lida, procesar con la API
  await this.processQuestion(inputText);
}

// M√©todo mejorado para manejar casos especiales
handleSpecialCases(inputText) {
  const lowerInput = inputText.toLowerCase().trim();
  
  // Respuestas para saludos
  if (this.isGreeting(inputText)) {
    const greetingsResponses = [
      "¬°Hola! ¬øEn qu√© puedo ayudarte hoy?",
      "¬°Hola! ¬øC√≥mo est√°s? Cu√©ntame, ¬øqu√© necesitas?",
      "¬°Hola! üòä Estoy aqu√≠ para ayudarte. ¬øEn qu√© puedo asistirte?",
      "¬°Holi! ‚ú® ¬øQu√© te gustar√≠a saber hoy?"
    ];
    const randomResponse = greetingsResponses[Math.floor(Math.random() * greetingsResponses.length)];
    this.view.mostrarMensaje(randomResponse, false);
    return;
  }
  
  // Respuesta para texto no v√°lido (n√∫meros, s√≠mbolos, etc.)
  if (!this.isValidQuestion(inputText)) {
    const invalidResponses = [
      "No entend√≠ tu mensaje. ¬øPodr√≠as formular una pregunta m√°s clara?",
      "Parece que no has formulado una pregunta. ¬øEn qu√© puedo ayudarte?",
      "¬øPodr√≠as ser m√°s espec√≠fico? No logro entender tu consulta.",
      "No reconozco eso como una pregunta v√°lida. ¬øTe refieres a algo en particular?"
    ];
    const randomResponse = invalidResponses[Math.floor(Math.random() * invalidResponses.length)];
    this.view.mostrarMensaje(randomResponse, false);
  }
}

// M√©todo mejorado para detectar saludos
isGreeting(text) {
  const greetings = [
    "hola", "holi", "holis", "holaa", "holaaa", 
    "buenos d√≠as", "buenas tardes", "buenas noches", 
    "hi", "hello", "hey", "saludos", "qu√© tal", "que tal"
  ];
  
  const normalizedText = text.toLowerCase().trim().replace(/[^\w\s]/g, ""); // Elimina puntuaci√≥n
  
  return greetings.some(greeting => normalizedText.startsWith(greeting));
}

// M√©todo mejorado para validar preguntas
isValidQuestion(question) {
  question = question.trim();
  
  // Si es un saludo, no es pregunta v√°lida
  if (this.isGreeting(question)) return false;
  
  // Validaciones mejoradas
  if (question.length < 3) return false; // Reducido a 3 caracteres m√≠nimo
  if (question.length > 200) return false;
  
  // No solo signos de puntuaci√≥n o espacios
  if (/^[\s?¬ø¬°!.,;:-]+$/.test(question)) return false;
  
  // Debe contener al menos 2 letras (no solo n√∫meros/s√≠mbolos)
  if (!/[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë]{2,}/.test(question)) return false;
  
  // No solo n√∫meros
  if (/^\d+$/.test(question)) return false;
  
  return true;
}

async processQuestion(question) {
  try {
    // Validaci√≥n mejorada
    if (!this.isValidQuestion(question)) {
      this.view.mostrarMensaje("Por favor escribe una pregunta m√°s clara (m√≠nimo 4 caracteres)", false);
      return;
    }

    this.view.mostrarCargando();
 
    
    const response = await fetch('http://localhost:3000/api/query', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ prompt: question })
    });
    this.view.ocultarCargando();
    const data = await response.json();
    
    if (!response.ok) {
      // Manejo espec√≠fico para error 429
      if (response.status === 429) {
        throw new Error("Estamos experimentando alta demanda. Por favor intenta m√°s tarde.");
      }
      throw new Error(data.error || "Error al procesar tu pregunta");
    }

    if (!data.answer) {
      throw new Error("No se recibi√≥ una respuesta v√°lida");
    }

    this.view.mostrarMensaje(data.answer, false);
    
  } catch (error) {
    this.view.ocultarCargando();
    console.error('Error al procesar pregunta:', error);
    
    
    // Mensajes de error espec√≠ficos
    const mensajeError = error.message.includes("alta demanda")
      ? error.message
      : "Lo siento, ocurri√≥ un error, intenta mas tarde.";
    
    this.view.mostrarMensaje(mensajeError, false);

    // Obtener informaci√≥n de soporte t√©cnico
    const contactos = SoporteTecnico.obtenerContactos();
    const ubicaciones = SoporteTecnico.obtenerUbicaciones();
    
    // Construir mensaje de soporte
    let mensajeSoporte = "\n\nüìû Por favor contacta al area responsable:";
    mensajeSoporte += `\n- ${contactos.join("\n- ")}`;
    mensajeSoporte += `\n\nüìç Ubicaciones: ${ubicaciones.join(", ")}`;
    mensajeSoporte += "\n\nEstaremos encantados de ayudarte.";
    
    this.view.mostrarMensaje(mensajeSoporte, false);
    
  } finally {
    this.view.ocultarCargando();
  }
}
}
// Al final de ChatbotController.js (fuera de la clase)
if (typeof document !== 'undefined') {
  document.addEventListener('DOMContentLoaded', () => {
    console.log("DOM completamente cargado - iniciando controlador");
    new ChatbotController();
  });
}

export default ChatbotController;
